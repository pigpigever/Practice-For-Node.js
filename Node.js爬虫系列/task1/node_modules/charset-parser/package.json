{
  "_args": [
    [
      {
        "raw": "charset-parser@^0.2.0",
        "scope": null,
        "escapedName": "charset-parser",
        "name": "charset-parser",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/home/ggboy/文档/repositories/Practice-For-Node.js/Node.js爬虫系列/task1/node_modules/crawler"
    ]
  ],
  "_from": "charset-parser@>=0.2.0 <0.3.0",
  "_id": "charset-parser@0.2.0",
  "_inCache": true,
  "_location": "/charset-parser",
  "_npmUser": {
    "name": "frankkanis",
    "email": "frank.kanis@gmail.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "charset-parser@^0.2.0",
    "scope": null,
    "escapedName": "charset-parser",
    "name": "charset-parser",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/crawler"
  ],
  "_resolved": "http://registry.npmjs.org/charset-parser/-/charset-parser-0.2.0.tgz",
  "_shasum": "230901088f5f6cb1659a8b5aaad2572db7a75b6b",
  "_shrinkwrap": null,
  "_spec": "charset-parser@^0.2.0",
  "_where": "/home/ggboy/文档/repositories/Practice-For-Node.js/Node.js爬虫系列/task1/node_modules/crawler",
  "author": {
    "name": "Frank Kanis",
    "email": "frank.kanis@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/frankkanis/charset-parser/issues"
  },
  "dependencies": {},
  "description": "Parse charset string from http header and hmtl meta",
  "devDependencies": {
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "230901088f5f6cb1659a8b5aaad2572db7a75b6b",
    "tarball": "https://registry.npmjs.org/charset-parser/-/charset-parser-0.2.0.tgz"
  },
  "gitHead": "993073bd6c6a2d31101d4f84bb8e9b74740a4688",
  "homepage": "https://github.com/frankkanis/charset-parser",
  "keywords": [
    "charset",
    "parse",
    "utf-8",
    "iso-8859-1",
    "http",
    "content-type",
    "header",
    "meta",
    "html"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/frankkanis/charset-parser/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "frankkanis",
      "email": "frank.kanis@gmail.com"
    }
  ],
  "name": "charset-parser",
  "optionalDependencies": {},
  "readme": "Charset Parser\n==============\n\n- Node.js module\n- Parse charset string from http header and html data\n\n## Installation\n\n```sh\nnpm install charset-parser --save\n```\n\n## Usage\n* Input a string, the charsetParser will find the charset string\n\n```js\n// charsetParser(string);\nvar charset = charsetParser('Content-Type:text/html; charset=utf-8');\n```\n* Input: the content type from http header, binary html content and a default charset\n* If http header has no charset defined, the binary content will parse, if there is also no charset, it returns the default\n\n```js\n// charsetParser(header, html, default_charset);\nvar charset = charsetParser('Content-Type:text/html; charset=utf-8',\n                            '<html><head><meta charset=utf-8></head><body></body></html>',\n                            'iso-8859-1');\n```\n\n## Example\n* A small example with node.js modules 'request' and 'iconv-lite'\n\n```js\nvar request = require('request');\nvar iconv = require('iconv-lite');\nvar charsetParser = require('charset-parser');\n\niconv.extendNodeEncodings();\n\nrequest('http://example.com', {encoding: 'binary'}, function(err, res, binary){\n  // parse charset\n  var charset = charsetParser(res.headers['content-type'], binary, 'iso-8859-1');\n  // decode binary with charset\n  var html = iconv.decode(binary, charset);\n  // TODO: do something with html\n}\n\n```\n\n## Test\n\n```sh\nnpm install\nnpm test\n```\n\n## Release History\n\n* 0.2.0 Add more input parameters\n* 0.1.0 Initial release\n\n## License\n\n  [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/frankkanis/charset-parser.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.2.0"
}

{
  "_args": [
    [
      {
        "raw": "seenreq@^0.1.7",
        "scope": null,
        "escapedName": "seenreq",
        "name": "seenreq",
        "rawSpec": "^0.1.7",
        "spec": ">=0.1.7 <0.2.0",
        "type": "range"
      },
      "/home/ggboy/文档/repositories/Practice-For-Node.js/Node.js爬虫系列/task1/node_modules/crawler"
    ]
  ],
  "_from": "seenreq@>=0.1.7 <0.2.0",
  "_id": "seenreq@0.1.11",
  "_inCache": true,
  "_location": "/seenreq",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/seenreq-0.1.11.tgz_1481624747676_0.67771529359743"
  },
  "_npmUser": {
    "name": "mike442144",
    "email": "mike442144@hotmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "seenreq@^0.1.7",
    "scope": null,
    "escapedName": "seenreq",
    "name": "seenreq",
    "rawSpec": "^0.1.7",
    "spec": ">=0.1.7 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/crawler"
  ],
  "_resolved": "http://registry.npmjs.org/seenreq/-/seenreq-0.1.11.tgz",
  "_shasum": "004b376c69414bed95188f78563ef0a6928289ac",
  "_shrinkwrap": null,
  "_spec": "seenreq@^0.1.7",
  "_where": "/home/ggboy/文档/repositories/Practice-For-Node.js/Node.js爬虫系列/task1/node_modules/crawler",
  "author": {
    "name": "Mike Chen"
  },
  "bugs": {
    "url": "https://github.com/mike442144/seenreq/issues"
  },
  "dependencies": {
    "ioredis": "^1.8.0",
    "node-url-utils": "^0.4.0",
    "utils-merge": "^1.0.0"
  },
  "description": "A library to test if a url(request) is crawled, usually used in a web crawler. Compatible with `request` and `node-crawler`",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "004b376c69414bed95188f78563ef0a6928289ac",
    "tarball": "https://registry.npmjs.org/seenreq/-/seenreq-0.1.11.tgz"
  },
  "gitHead": "19c424743a7541d7420c4d0eedb5a8a515354a99",
  "homepage": "https://github.com/mike442144/seenreq",
  "keywords": [
    "nodejs",
    "url seen test",
    "reomve duplicate url",
    "request normalize"
  ],
  "license": "MIT",
  "main": "./lib/seenreq.js",
  "maintainers": [
    {
      "name": "mike442144",
      "email": "mike442144@hotmail.com"
    }
  ],
  "name": "seenreq",
  "optionalDependencies": {
    "ioredis": "^1.8.0"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mike442144/seenreq.png)](https://travis-ci.org/mike442144/seenreq)\n# seenreq\nA library to test if a url(request) is crawled, usually used in a web crawler. Compatible with [request](https://github.com/request/request) and [node-crawler](https://github.com/bda-research/node-crawler)\n\n# Notice: Please do not use 0.1.6 or lower version on Node 4.0+\n\n# Install\n\n    $ npm install seenreq\n\n# Basic Usage\n\n```javascript\nvar seenreq = require('seenreq')\nvar seen = new seenreq();\n\n//url to be normalized\nvar url = \"http://www.GOOGLE.com\";\nconsole.log(seen.normalize(url));//GET http://www.google.com/\\r\\n\n\n//request options to be normalized\nvar option = {\n    uri:'http://www.GOOGLE.com'\n};\n\nconsole.log(seen.normalize(option));//GET http://www.google.com/\\r\\n\n\n//return false if ask for a `request` never see\nconsole.log(seen.exists(url));//false\n\n//return true if got same `request`\nconsole.log(seen.exists(opt));//true\n```\nWhen you call `exists`, the module will do normalization itself first and then check if exists.\n\n# Use Redis to store keys\n`seenreq` default stores keys in memory, so process will use unlimited memory if there are unlimited keys. Redis will solve this problem.\n\n```javascript\nvar seenreq = require('seenreq')\nvar seen = new seenreq({\n    repo:'redis',// use redis instead of memory\n    host:'127.0.0.1',\n    port:6379,\n    clearOnQuit:false // default true.\n});\n\nvar url = \"http://www.GOOGLE.com\";\n\n//because of non-blocking I/O, you have to use a callback function to get result\nseen.exists(url,{\n    callback:function(err,result){\n        if(err){\n            console.error(err);\n        }else{\n            console.log(result);\n        }\n    }\n});\n\n```\nClass:Seenreq\n-------------\n\nInstance of Seenreq\n\n__seen.normalize(uri|option)__\n * `uri` String, `option` is Option of `request` or `node-webcrawler`. return normalized String.\n\n__seen.exists(uri|option|[uri][,options])__\n * [options](#options), Warning: When using default `repo` if you call `exists` with an array of `uri` that have duplicate uris, the function won't remove.\n\n__seen.dispose()__\n * dispose resources of repo. If you are using Redis and do not call `dispose` the connection will keep forever, that is your process will never exit.\n\nOptions\n-----------------\n * removeKeys: Array, Ignore specified keys when doing normalization. For instance, there is a `ts` property in the url like `http://www.xxx.com/index?ts=1442382602504` which is timestamp and it should be same whenever you visit.\n * stripFragment: Boolean, Remove the fragment at the end of the URL (Default true).\n * callback: Function, return result if using Redis repo.\n\n# RoadMap\n * add `mysql` repo to persist keys to disk.\n * add keys life time management.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mike442144/seenreq.git"
  },
  "scripts": {
    "test": "node tests/test.*.js"
  },
  "version": "0.1.11"
}
